{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface InAppBrowserInterface {\n  /**\n   * Open a URL inside the webview or show a hidden webview\n   * Should only be called after createWebView has finished successfully\n   * optional headers can be set here as well for example User-Agent\n   */\n  openWebView(options: OpenOptions): Promise<void>;\n  /**\n   * Close and destroy an open webview.\n   */\n  closeWebView(): Promise<void>;\n  /**\n   * Hides the current webview.\n   */\n  hideWebView(): Promise<void>;\n  /**\n   * Shows the current webview.\n   */\n  showWebView(): Promise<void>;\n  /**\n   * Handle back navigation inside the webview\n   */\n  navigateBack(): Promise<void>;\n  /**\n   * Handle forward navigation inside the webview\n   */\n  navigateForward(): Promise<void>;\n  /**\n   * Load a specified URL in an existing webview.\n   */\n  loadUrl(options: { url: string }): Promise<void>;\n  /**\n   * Refresh the current page in the webview.\n   */\n  reload(): Promise<void>;\n  /**\n   * Event callback when the webview URL changes.\n   * Response parameters:\n   * newWindowRequest: boolean;\n   * isSameHost: boolean;\n   * complete: boolean;\n   * This can be used to decide what to do when a URL is requested in a new window\n   * from the same or different host origin. The callback event.complete(true/false)\n   * can be used to cancel or continue the load process and to handle the window\n   * request as desired.\n   */\n  onNavigation(listenerFunc: ListenerFunc<NavigationEvent>): Promise<void>;\n  /**\n   * Event triggered by the webview when the target URL has finished loading\n   */\n  onPageLoaded(listenerFunc: ListenerFunc<PageLoadStatus>): Promise<void>;\n  /**\n   * Event triggered by the webview when URL loading has failed\n   * Returns the HTTP request error code.\n   */\n  onPageLoadError(listenerFunc: ListenerFunc<ErrorCode>): Promise<void>;\n  /**\n   * Event triggered by the webview when the webview is resized\n   */\n  onUpdateDimensions(listenerFunc: ListenerFunc<void>): Promise<void>;\n  /**\n   *  Create a screenshot of the current view\n   *  and set it as a background of the web view container element.\n   *  This is needed if there are HTML/Javascript UI elements to be overlaid.\n   */\n  captureScreen(showScreenCapture: boolean): Promise<void>;\n  /**\n   * Update the dimensions of the webview\n   */\n  updateDimensions(options?: Dimensions): Promise<void>;\n}\n\nexport interface NativeInterface {\n  openWebView(options: OpenOptions): Promise<void>;\n  closeWebView(): Promise<void>;\n  showWebView(): Promise<void>;\n  hideWebView(): Promise<void>;\n  openSystemBrowser(options: { url: string }): Promise<void>;\n  openBrowser(options: OpenOptions): Promise<void>;\n  navigateBack(): Promise<void>;\n  navigateForward(): Promise<void>;\n  refresh(): Promise<void>;\n  loadUrl(options?: { url: string }): Promise<void>;\n  onNavigation(options?: { allow: boolean }): Promise<void>;\n  updateDimensions(options?: Dimensions): Promise<void>;\n  captureScreen(options?: Dimensions): Promise<ScreenShot>;\n  addListener(\n    eventName: EventListeners,\n    listenerFunc: (...args: any[]) => void,\n  ): Promise<PluginListenerHandle>;\n}\nexport interface OpenOptions extends Dimensions {\n  /**\n   * The URL to open the webview to\n   */\n  url: string;\n  /**\n   * element id of DOM node to which the webview should be attached\n   * web view only\n   */\n  element?: HTMLElement;\n  /**\n   * Request headers\n   */\n  headers?: Headers;\n  /**\n   * Set the color scheme for safari system browser and custom tabs\n   */\n  colorScheme?: ColorScheme;\n}\nexport interface ColorScheme {\n  /**\n   * Set the toolbar color\n   * Android & iOS\n   */\n  toolBarColor?: string;\n  /**\n   * Set the navigation bar color\n   * Android only\n   */\n  navigationBarColor?: string;\n  /**\n   * Set the navigation bar divider color\n   * Android only\n   */\n  navigationBarDividerColor?: string;\n  /**\n   * Set the secondar toolbar color\n   * Android only\n   */\n  secondaryToolbarColor?: string;\n}\nexport interface Dimensions {\n  width?: number;\n  height?: number;\n  x?: number;\n  y?: number;\n  ratio?: number;\n}\nexport interface Headers {\n  [key: string]: string;\n}\nexport interface ListenerFunc<T> {\n  (event: T): void;\n}\nexport type NavigationEvent = {\n  /**\n   *  current url being loaded\n   */\n  url: string;\n  /**\n   *  current url target (new window, i.e. _blank / _self, etc)\n   */\n  newWindowRequest: boolean;\n  /**\n   *  current url is from same host\n   */\n  isSameHost: boolean;\n  /**\n   *  complete current url loading\n   */\n  complete: (allow: boolean) => void;\n};\nexport type EventListeners =\n  | 'pageLoaded'\n  | 'updateDimensions'\n  | 'updateScreenCapture'\n  | 'navigationHandler'\n  | 'pageLoadError';\nexport type ErrorCode = { errorCode: number };\nexport type PageLoadStatus = { isLoading: boolean };\nexport type ScreenShot = { src: string };\n"]}